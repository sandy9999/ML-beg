#Source: https://github.com/makeyourownneuralnetwork/makeyourownneuralnetwork/blob/master/part2_neural_network.ipynb
import numpy
import scipy.special

def sigmoid(x):
    return scipy.special.expit(x)

class neuralnetwork:
    def __init__(self, inputl, hiddenl, outputl, learnrate):
        self.i = inputl
        self.h = hiddenl
        self.o = outputl
        self.lr = learnrate
        self.wih = numpy.random.uniform(low = -pow(self.h,-0.5),high = pow(self.h,-0.5),size = (self.h,self.i))
        self.who = numpy.random.uniform(low = -pow(self.o,-0.5),high = pow(self.o,-0.5),size = (self.o,self.h)) 
    def train(self,inp,tg):
        inputs = numpy.array(inp).T
        targetv = numpy.array(tg).T #.T stands for transpose
        hiddeninputs = numpy.dot(self.wih,inputs)
        hiddenoutputs = sigmoid(hiddeninputs)
        lastinputs = numpy.dot(self.who,hiddenoutputs)
        outputs = sigmoid(lastinputs)
        outputerrors = targetv - outputs
        hiddenerrors = numpy.dot(self.who.T,outputerrors)
        self.who += self.lr*numpy.dot((outputerrors*outputs*(1.0-outputs)),numpy.transpose(hiddenoutputs))
        
        
    def query(self,inp):
        inputs = numpy.array(inp).T
        hiddeninputs = numpy.dot(self.wih,inputs)
        hiddenoutputs = sigmoid(hiddeninputs)
        lastinputs = numpy.dot(self.who,hiddenoutputs)
        outputs = sigmoid(lastinputs)
        return outputs

inputl = 3
hiddenl = 3
outputl = 3
learnrate = 0.5
n = neuralnetwork(inputl, hiddenl, outputl, learnrate)